// This file was generated by gir (5a68ad0) from gir-files (469db10)
// DO NOT EDIT

use FilterInputStream;
use InputStream;
use PollableInputStream;
use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct ConverterInputStream(Object<ffi::GConverterInputStream, ffi::GConverterInputStreamClass>): FilterInputStream, InputStream, PollableInputStream;

    match fn {
        get_type => || ffi::g_converter_input_stream_get_type(),
    }
}

impl ConverterInputStream {
    //pub fn new<P: IsA<InputStream>, Q: IsA</*Ignored*/Converter>>(base_stream: &P, converter: &Q) -> ConverterInputStream {
    //    unsafe { TODO: call ffi::g_converter_input_stream_new() }
    //}
}

pub trait ConverterInputStreamExt {
    //fn get_converter(&self) -> /*Ignored*/Option<Converter>;

    //fn get_property_converter(&self) -> /*Ignored*/Option<Converter>;

    fn connect_property_converter_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<ConverterInputStream> + IsA<glib::object::Object>> ConverterInputStreamExt for O {
    //fn get_converter(&self) -> /*Ignored*/Option<Converter> {
    //    unsafe { TODO: call ffi::g_converter_input_stream_get_converter() }
    //}

    //fn get_property_converter(&self) -> /*Ignored*/Option<Converter> {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_ffi::g_object_get_property(self.to_glib_none().0, "converter".to_glib_none().0, value.to_glib_none_mut().0);
    //        value.get()
    //    }
    //}

    fn connect_property_converter_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::converter",
                transmute(notify_converter_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_converter_trampoline<P>(this: *mut ffi::GConverterInputStream, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<ConverterInputStream> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&ConverterInputStream::from_glib_borrow(this).downcast_unchecked())
}
