// This file was generated by gir (5a68ad0) from gir-files (469db10)
// DO NOT EDIT

use ActionGroup;
use AsyncResult;
use Cancellable;
use Credentials;
use DBusAuthObserver;
use DBusCallFlags;
use DBusCapabilityFlags;
use DBusConnectionFlags;
use DBusMessage;
use Error;
use IOStream;
use Initable;
use MenuModel;
use ffi;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct DBusConnection(Object<ffi::GDBusConnection>): Initable;

    match fn {
        get_type => || ffi::g_dbus_connection_get_type(),
    }
}

impl DBusConnection {
    pub fn new_for_address_sync<'a, 'b, P: Into<Option<&'a DBusAuthObserver>>, Q: Into<Option<&'b Cancellable>>>(address: &str, flags: DBusConnectionFlags, observer: P, cancellable: Q) -> Result<DBusConnection, Error> {
        let observer = observer.into();
        let observer = observer.to_glib_none();
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::g_dbus_connection_new_for_address_sync(address.to_glib_none().0, flags.to_glib(), observer.0, cancellable.0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    pub fn new_sync<'a, 'b, 'c, P: IsA<IOStream>, Q: Into<Option<&'a str>>, R: Into<Option<&'b DBusAuthObserver>>, S: Into<Option<&'c Cancellable>>>(stream: &P, guid: Q, flags: DBusConnectionFlags, observer: R, cancellable: S) -> Result<DBusConnection, Error> {
        let guid = guid.into();
        let guid = guid.to_glib_none();
        let observer = observer.into();
        let observer = observer.to_glib_none();
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::g_dbus_connection_new_sync(stream.to_glib_none().0, guid.0, flags.to_glib(), observer.0, cancellable.0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //pub fn new<'a, 'b, 'c, 'd, P: IsA<IOStream>, Q: Into<Option<&'a str>>, R: Into<Option<&'b DBusAuthObserver>>, S: Into<Option<&'c Cancellable>>, T: Into<Option<&'d /*Unimplemented*/AsyncReadyCallback>>, U: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(stream: &P, guid: Q, flags: DBusConnectionFlags, observer: R, cancellable: S, callback: T, user_data: U) {
    //    unsafe { TODO: call ffi::g_dbus_connection_new() }
    //}

    //pub fn new_for_address<'a, 'b, 'c, P: Into<Option<&'a DBusAuthObserver>>, Q: Into<Option<&'b Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(address: &str, flags: DBusConnectionFlags, observer: P, cancellable: Q, callback: R, user_data: S) {
    //    unsafe { TODO: call ffi::g_dbus_connection_new_for_address() }
    //}
}

pub trait DBusConnectionExt {
    //fn add_filter<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, filter_function: /*Unknown conversion*//*Unimplemented*/DBusMessageFilterFunction, user_data: P, user_data_free_func: /*Unknown conversion*//*Unimplemented*/DestroyNotify) -> u32;

    //fn call<'a, 'b, 'c, 'd, 'e, P: Into<Option<&'a str>>, Q: Into<Option<&'b glib::Variant>>, R: Into<Option<&'c glib::VariantTy>>, S: Into<Option<&'d Cancellable>>, T: Into<Option<&'e /*Unimplemented*/AsyncReadyCallback>>, U: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, bus_name: P, object_path: &str, interface_name: &str, method_name: &str, parameters: Q, reply_type: R, flags: DBusCallFlags, timeout_msec: i32, cancellable: S, callback: T, user_data: U);

    fn call_sync<'a, 'b, 'c, 'd, P: Into<Option<&'a str>>, Q: Into<Option<&'b glib::Variant>>, R: Into<Option<&'c glib::VariantTy>>, S: Into<Option<&'d Cancellable>>>(&self, bus_name: P, object_path: &str, interface_name: &str, method_name: &str, parameters: Q, reply_type: R, flags: DBusCallFlags, timeout_msec: i32, cancellable: S) -> Result<glib::Variant, Error>;

    //fn call_with_unix_fd_list<'a, 'b, 'c, 'd, 'e, 'f, P: Into<Option<&'a str>>, Q: Into<Option<&'b glib::Variant>>, R: Into<Option<&'c glib::VariantTy>>, S: Into<Option<&'d /*Ignored*/UnixFDList>>, T: Into<Option<&'e Cancellable>>, U: Into<Option<&'f /*Unimplemented*/AsyncReadyCallback>>, V: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, bus_name: P, object_path: &str, interface_name: &str, method_name: &str, parameters: Q, reply_type: R, flags: DBusCallFlags, timeout_msec: i32, fd_list: S, cancellable: T, callback: U, user_data: V);

    //fn call_with_unix_fd_list_sync<'a, 'b, 'c, 'd, 'e, P: Into<Option<&'a str>>, Q: Into<Option<&'b glib::Variant>>, R: Into<Option<&'c glib::VariantTy>>, S: Into<Option<&'d /*Ignored*/UnixFDList>>, T: Into<Option<&'e Cancellable>>>(&self, bus_name: P, object_path: &str, interface_name: &str, method_name: &str, parameters: Q, reply_type: R, flags: DBusCallFlags, timeout_msec: i32, fd_list: S, out_fd_list: /*Ignored*/UnixFDList, cancellable: T) -> Result<glib::Variant, Error>;

    //fn close<'a, 'b, P: Into<Option<&'a Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, cancellable: P, callback: Q, user_data: R);

    fn close_sync<'a, P: Into<Option<&'a Cancellable>>>(&self, cancellable: P) -> Result<(), Error>;

    fn emit_signal<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b glib::Variant>>>(&self, destination_bus_name: P, object_path: &str, interface_name: &str, signal_name: &str, parameters: Q) -> Result<(), Error>;

    fn export_action_group<P: IsA<ActionGroup>>(&self, object_path: &str, action_group: &P) -> Result<(), Error>;

    fn export_menu_model<P: IsA<MenuModel>>(&self, object_path: &str, menu: &P) -> Result<(), Error>;

    //fn flush<'a, 'b, P: Into<Option<&'a Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, cancellable: P, callback: Q, user_data: R);

    fn flush_sync<'a, P: Into<Option<&'a Cancellable>>>(&self, cancellable: P) -> Result<(), Error>;

    fn get_capabilities(&self) -> DBusCapabilityFlags;

    fn get_exit_on_close(&self) -> bool;

    fn get_guid(&self) -> Option<String>;

    #[cfg(any(feature = "v2_34", feature = "dox"))]
    fn get_last_serial(&self) -> u32;

    fn get_peer_credentials(&self) -> Option<Credentials>;

    fn get_stream(&self) -> Option<IOStream>;

    fn get_unique_name(&self) -> Option<String>;

    fn is_closed(&self) -> bool;

    //fn register_object<'a, P: Into<Option<&'a /*Ignored*/DBusInterfaceVTable>>, Q: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, object_path: &str, interface_info: &DBusInterfaceInfo, vtable: P, user_data: Q, user_data_free_func: /*Unknown conversion*//*Unimplemented*/DestroyNotify) -> Result<(), Error>;

    //#[cfg(any(feature = "v2_46", feature = "dox"))]
    //fn register_object_with_closures<'a, 'b, 'c, P: Into<Option<&'a /*Ignored*/glib::Closure>>, Q: Into<Option<&'b /*Ignored*/glib::Closure>>, R: Into<Option<&'c /*Ignored*/glib::Closure>>>(&self, object_path: &str, interface_info: &DBusInterfaceInfo, method_call_closure: P, get_property_closure: Q, set_property_closure: R) -> Result<(), Error>;

    //fn register_subtree<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, object_path: &str, vtable: /*Ignored*/&DBusSubtreeVTable, flags: /*Ignored*/DBusSubtreeFlags, user_data: P, user_data_free_func: /*Unknown conversion*//*Unimplemented*/DestroyNotify) -> Result<(), Error>;

    fn remove_filter(&self, filter_id: u32);

    //fn send_message_with_reply<'a, 'b, P: Into<Option<&'a Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, message: &DBusMessage, flags: DBusSendMessageFlags, timeout_msec: i32, cancellable: P, callback: Q, user_data: R) -> u32;

    fn set_exit_on_close(&self, exit_on_close: bool);

    //fn signal_subscribe<'a, 'b, 'c, 'd, 'e, 'f, P: Into<Option<&'a str>>, Q: Into<Option<&'b str>>, R: Into<Option<&'c str>>, S: Into<Option<&'d str>>, T: Into<Option<&'e str>>, U: Into<Option</*Unimplemented*/Fundamental: Pointer>>, V: Into<Option<&'f /*Ignored*/glib::DestroyNotify>>>(&self, sender: P, interface_name: Q, member: R, object_path: S, arg0: T, flags: /*Ignored*/DBusSignalFlags, callback: /*Unknown conversion*//*Unimplemented*/DBusSignalCallback, user_data: U, user_data_free_func: V) -> u32;

    fn signal_unsubscribe(&self, subscription_id: u32);

    fn start_message_processing(&self);

    fn unexport_action_group(&self, export_id: u32);

    fn unexport_menu_model(&self, export_id: u32);

    fn unregister_object(&self, registration_id: u32) -> bool;

    fn unregister_subtree(&self, registration_id: u32) -> bool;

    fn get_property_closed(&self) -> bool;

    fn connect_closed<F: Fn(&Self, bool, &Option<Error>) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_authentication_observer_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_capabilities_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_closed_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_exit_on_close_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_guid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_stream_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_unique_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DBusConnection> + IsA<glib::object::Object>> DBusConnectionExt for O {
    //fn add_filter<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, filter_function: /*Unknown conversion*//*Unimplemented*/DBusMessageFilterFunction, user_data: P, user_data_free_func: /*Unknown conversion*//*Unimplemented*/DestroyNotify) -> u32 {
    //    unsafe { TODO: call ffi::g_dbus_connection_add_filter() }
    //}

    //fn call<'a, 'b, 'c, 'd, 'e, P: Into<Option<&'a str>>, Q: Into<Option<&'b glib::Variant>>, R: Into<Option<&'c glib::VariantTy>>, S: Into<Option<&'d Cancellable>>, T: Into<Option<&'e /*Unimplemented*/AsyncReadyCallback>>, U: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, bus_name: P, object_path: &str, interface_name: &str, method_name: &str, parameters: Q, reply_type: R, flags: DBusCallFlags, timeout_msec: i32, cancellable: S, callback: T, user_data: U) {
    //    unsafe { TODO: call ffi::g_dbus_connection_call() }
    //}

    fn call_sync<'a, 'b, 'c, 'd, P: Into<Option<&'a str>>, Q: Into<Option<&'b glib::Variant>>, R: Into<Option<&'c glib::VariantTy>>, S: Into<Option<&'d Cancellable>>>(&self, bus_name: P, object_path: &str, interface_name: &str, method_name: &str, parameters: Q, reply_type: R, flags: DBusCallFlags, timeout_msec: i32, cancellable: S) -> Result<glib::Variant, Error> {
        let bus_name = bus_name.into();
        let bus_name = bus_name.to_glib_none();
        let parameters = parameters.into();
        let parameters = parameters.to_glib_none();
        let reply_type = reply_type.into();
        let reply_type = reply_type.to_glib_none();
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::g_dbus_connection_call_sync(self.to_glib_none().0, bus_name.0, object_path.to_glib_none().0, interface_name.to_glib_none().0, method_name.to_glib_none().0, parameters.0, reply_type.0, flags.to_glib(), timeout_msec, cancellable.0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //fn call_with_unix_fd_list<'a, 'b, 'c, 'd, 'e, 'f, P: Into<Option<&'a str>>, Q: Into<Option<&'b glib::Variant>>, R: Into<Option<&'c glib::VariantTy>>, S: Into<Option<&'d /*Ignored*/UnixFDList>>, T: Into<Option<&'e Cancellable>>, U: Into<Option<&'f /*Unimplemented*/AsyncReadyCallback>>, V: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, bus_name: P, object_path: &str, interface_name: &str, method_name: &str, parameters: Q, reply_type: R, flags: DBusCallFlags, timeout_msec: i32, fd_list: S, cancellable: T, callback: U, user_data: V) {
    //    unsafe { TODO: call ffi::g_dbus_connection_call_with_unix_fd_list() }
    //}

    //fn call_with_unix_fd_list_sync<'a, 'b, 'c, 'd, 'e, P: Into<Option<&'a str>>, Q: Into<Option<&'b glib::Variant>>, R: Into<Option<&'c glib::VariantTy>>, S: Into<Option<&'d /*Ignored*/UnixFDList>>, T: Into<Option<&'e Cancellable>>>(&self, bus_name: P, object_path: &str, interface_name: &str, method_name: &str, parameters: Q, reply_type: R, flags: DBusCallFlags, timeout_msec: i32, fd_list: S, out_fd_list: /*Ignored*/UnixFDList, cancellable: T) -> Result<glib::Variant, Error> {
    //    unsafe { TODO: call ffi::g_dbus_connection_call_with_unix_fd_list_sync() }
    //}

    //fn close<'a, 'b, P: Into<Option<&'a Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::g_dbus_connection_close() }
    //}

    fn close_sync<'a, P: Into<Option<&'a Cancellable>>>(&self, cancellable: P) -> Result<(), Error> {
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::g_dbus_connection_close_sync(self.to_glib_none().0, cancellable.0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn emit_signal<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b glib::Variant>>>(&self, destination_bus_name: P, object_path: &str, interface_name: &str, signal_name: &str, parameters: Q) -> Result<(), Error> {
        let destination_bus_name = destination_bus_name.into();
        let destination_bus_name = destination_bus_name.to_glib_none();
        let parameters = parameters.into();
        let parameters = parameters.to_glib_none();
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::g_dbus_connection_emit_signal(self.to_glib_none().0, destination_bus_name.0, object_path.to_glib_none().0, interface_name.to_glib_none().0, signal_name.to_glib_none().0, parameters.0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn export_action_group<P: IsA<ActionGroup>>(&self, object_path: &str, action_group: &P) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::g_dbus_connection_export_action_group(self.to_glib_none().0, object_path.to_glib_none().0, action_group.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn export_menu_model<P: IsA<MenuModel>>(&self, object_path: &str, menu: &P) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::g_dbus_connection_export_menu_model(self.to_glib_none().0, object_path.to_glib_none().0, menu.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    //fn flush<'a, 'b, P: Into<Option<&'a Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::g_dbus_connection_flush() }
    //}

    fn flush_sync<'a, P: Into<Option<&'a Cancellable>>>(&self, cancellable: P) -> Result<(), Error> {
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::g_dbus_connection_flush_sync(self.to_glib_none().0, cancellable.0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn get_capabilities(&self) -> DBusCapabilityFlags {
        unsafe {
            from_glib(ffi::g_dbus_connection_get_capabilities(self.to_glib_none().0))
        }
    }

    fn get_exit_on_close(&self) -> bool {
        unsafe {
            from_glib(ffi::g_dbus_connection_get_exit_on_close(self.to_glib_none().0))
        }
    }

    fn get_guid(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_dbus_connection_get_guid(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_34", feature = "dox"))]
    fn get_last_serial(&self) -> u32 {
        unsafe {
            ffi::g_dbus_connection_get_last_serial(self.to_glib_none().0)
        }
    }

    fn get_peer_credentials(&self) -> Option<Credentials> {
        unsafe {
            from_glib_none(ffi::g_dbus_connection_get_peer_credentials(self.to_glib_none().0))
        }
    }

    fn get_stream(&self) -> Option<IOStream> {
        unsafe {
            from_glib_none(ffi::g_dbus_connection_get_stream(self.to_glib_none().0))
        }
    }

    fn get_unique_name(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_dbus_connection_get_unique_name(self.to_glib_none().0))
        }
    }

    fn is_closed(&self) -> bool {
        unsafe {
            from_glib(ffi::g_dbus_connection_is_closed(self.to_glib_none().0))
        }
    }

    //fn register_object<'a, P: Into<Option<&'a /*Ignored*/DBusInterfaceVTable>>, Q: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, object_path: &str, interface_info: &DBusInterfaceInfo, vtable: P, user_data: Q, user_data_free_func: /*Unknown conversion*//*Unimplemented*/DestroyNotify) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_dbus_connection_register_object() }
    //}

    //#[cfg(any(feature = "v2_46", feature = "dox"))]
    //fn register_object_with_closures<'a, 'b, 'c, P: Into<Option<&'a /*Ignored*/glib::Closure>>, Q: Into<Option<&'b /*Ignored*/glib::Closure>>, R: Into<Option<&'c /*Ignored*/glib::Closure>>>(&self, object_path: &str, interface_info: &DBusInterfaceInfo, method_call_closure: P, get_property_closure: Q, set_property_closure: R) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_dbus_connection_register_object_with_closures() }
    //}

    //fn register_subtree<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, object_path: &str, vtable: /*Ignored*/&DBusSubtreeVTable, flags: /*Ignored*/DBusSubtreeFlags, user_data: P, user_data_free_func: /*Unknown conversion*//*Unimplemented*/DestroyNotify) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_dbus_connection_register_subtree() }
    //}

    fn remove_filter(&self, filter_id: u32) {
        unsafe {
            ffi::g_dbus_connection_remove_filter(self.to_glib_none().0, filter_id);
        }
    }

    //fn send_message_with_reply<'a, 'b, P: Into<Option<&'a Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, message: &DBusMessage, flags: DBusSendMessageFlags, timeout_msec: i32, cancellable: P, callback: Q, user_data: R) -> u32 {
    //    unsafe { TODO: call ffi::g_dbus_connection_send_message_with_reply() }
    //}

    fn set_exit_on_close(&self, exit_on_close: bool) {
        unsafe {
            ffi::g_dbus_connection_set_exit_on_close(self.to_glib_none().0, exit_on_close.to_glib());
        }
    }

    //fn signal_subscribe<'a, 'b, 'c, 'd, 'e, 'f, P: Into<Option<&'a str>>, Q: Into<Option<&'b str>>, R: Into<Option<&'c str>>, S: Into<Option<&'d str>>, T: Into<Option<&'e str>>, U: Into<Option</*Unimplemented*/Fundamental: Pointer>>, V: Into<Option<&'f /*Ignored*/glib::DestroyNotify>>>(&self, sender: P, interface_name: Q, member: R, object_path: S, arg0: T, flags: /*Ignored*/DBusSignalFlags, callback: /*Unknown conversion*//*Unimplemented*/DBusSignalCallback, user_data: U, user_data_free_func: V) -> u32 {
    //    unsafe { TODO: call ffi::g_dbus_connection_signal_subscribe() }
    //}

    fn signal_unsubscribe(&self, subscription_id: u32) {
        unsafe {
            ffi::g_dbus_connection_signal_unsubscribe(self.to_glib_none().0, subscription_id);
        }
    }

    fn start_message_processing(&self) {
        unsafe {
            ffi::g_dbus_connection_start_message_processing(self.to_glib_none().0);
        }
    }

    fn unexport_action_group(&self, export_id: u32) {
        unsafe {
            ffi::g_dbus_connection_unexport_action_group(self.to_glib_none().0, export_id);
        }
    }

    fn unexport_menu_model(&self, export_id: u32) {
        unsafe {
            ffi::g_dbus_connection_unexport_menu_model(self.to_glib_none().0, export_id);
        }
    }

    fn unregister_object(&self, registration_id: u32) -> bool {
        unsafe {
            from_glib(ffi::g_dbus_connection_unregister_object(self.to_glib_none().0, registration_id))
        }
    }

    fn unregister_subtree(&self, registration_id: u32) -> bool {
        unsafe {
            from_glib(ffi::g_dbus_connection_unregister_subtree(self.to_glib_none().0, registration_id))
        }
    }

    fn get_property_closed(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "closed".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn connect_closed<F: Fn(&Self, bool, &Option<Error>) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, bool, &Option<Error>) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "closed",
                transmute(closed_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::address",
                transmute(notify_address_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_authentication_observer_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::authentication-observer",
                transmute(notify_authentication_observer_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_capabilities_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::capabilities",
                transmute(notify_capabilities_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_closed_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::closed",
                transmute(notify_closed_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_exit_on_close_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::exit-on-close",
                transmute(notify_exit_on_close_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::flags",
                transmute(notify_flags_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_guid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::guid",
                transmute(notify_guid_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_stream_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::stream",
                transmute(notify_stream_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_unique_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::unique-name",
                transmute(notify_unique_name_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn closed_trampoline<P>(this: *mut ffi::GDBusConnection, remote_peer_vanished: glib_ffi::gboolean, error: *mut glib_ffi::GError, f: glib_ffi::gpointer)
where P: IsA<DBusConnection> {
    callback_guard!();
    let f: &&(Fn(&P, bool, &Option<Error>) + 'static) = transmute(f);
    f(&DBusConnection::from_glib_borrow(this).downcast_unchecked(), from_glib(remote_peer_vanished), &from_glib_borrow(error))
}

unsafe extern "C" fn notify_address_trampoline<P>(this: *mut ffi::GDBusConnection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DBusConnection> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DBusConnection::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_authentication_observer_trampoline<P>(this: *mut ffi::GDBusConnection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DBusConnection> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DBusConnection::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_capabilities_trampoline<P>(this: *mut ffi::GDBusConnection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DBusConnection> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DBusConnection::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_closed_trampoline<P>(this: *mut ffi::GDBusConnection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DBusConnection> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DBusConnection::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_exit_on_close_trampoline<P>(this: *mut ffi::GDBusConnection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DBusConnection> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DBusConnection::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_flags_trampoline<P>(this: *mut ffi::GDBusConnection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DBusConnection> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DBusConnection::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_guid_trampoline<P>(this: *mut ffi::GDBusConnection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DBusConnection> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DBusConnection::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_stream_trampoline<P>(this: *mut ffi::GDBusConnection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DBusConnection> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DBusConnection::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_unique_name_trampoline<P>(this: *mut ffi::GDBusConnection, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DBusConnection> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DBusConnection::from_glib_borrow(this).downcast_unchecked())
}
