// This file was generated by gir (5a68ad0) from gir-files (469db10)
// DO NOT EDIT

use Cancellable;
use DBusAuthObserver;
use DBusConnection;
use DBusServerFlags;
use Error;
use Initable;
use ffi;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct DBusServer(Object<ffi::GDBusServer>): Initable;

    match fn {
        get_type => || ffi::g_dbus_server_get_type(),
    }
}

impl DBusServer {
    pub fn new_sync<'a, 'b, P: Into<Option<&'a DBusAuthObserver>>, Q: Into<Option<&'b Cancellable>>>(address: &str, flags: DBusServerFlags, guid: &str, observer: P, cancellable: Q) -> Result<DBusServer, Error> {
        let observer = observer.into();
        let observer = observer.to_glib_none();
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::g_dbus_server_new_sync(address.to_glib_none().0, flags.to_glib(), guid.to_glib_none().0, observer.0, cancellable.0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }
}

pub trait DBusServerExt {
    fn get_client_address(&self) -> Option<String>;

    fn get_flags(&self) -> DBusServerFlags;

    fn get_guid(&self) -> Option<String>;

    fn is_active(&self) -> bool;

    fn start(&self);

    fn stop(&self);

    fn get_property_active(&self) -> bool;

    fn get_property_address(&self) -> Option<String>;

    fn get_property_authentication_observer(&self) -> Option<DBusAuthObserver>;

    fn connect_new_connection<F: Fn(&Self, &DBusConnection) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_active_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_authentication_observer_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_client_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_guid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DBusServer> + IsA<glib::object::Object>> DBusServerExt for O {
    fn get_client_address(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_dbus_server_get_client_address(self.to_glib_none().0))
        }
    }

    fn get_flags(&self) -> DBusServerFlags {
        unsafe {
            from_glib(ffi::g_dbus_server_get_flags(self.to_glib_none().0))
        }
    }

    fn get_guid(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_dbus_server_get_guid(self.to_glib_none().0))
        }
    }

    fn is_active(&self) -> bool {
        unsafe {
            from_glib(ffi::g_dbus_server_is_active(self.to_glib_none().0))
        }
    }

    fn start(&self) {
        unsafe {
            ffi::g_dbus_server_start(self.to_glib_none().0);
        }
    }

    fn stop(&self) {
        unsafe {
            ffi::g_dbus_server_stop(self.to_glib_none().0);
        }
    }

    fn get_property_active(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "active".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_address(&self) -> Option<String> {
        unsafe {
            let mut value = Value::from_type(<String as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "address".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn get_property_authentication_observer(&self) -> Option<DBusAuthObserver> {
        unsafe {
            let mut value = Value::from_type(<DBusAuthObserver as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "authentication-observer".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn connect_new_connection<F: Fn(&Self, &DBusConnection) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &DBusConnection) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "new-connection",
                transmute(new_connection_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_active_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::active",
                transmute(notify_active_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::address",
                transmute(notify_address_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_authentication_observer_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::authentication-observer",
                transmute(notify_authentication_observer_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_client_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::client-address",
                transmute(notify_client_address_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::flags",
                transmute(notify_flags_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_guid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::guid",
                transmute(notify_guid_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn new_connection_trampoline<P>(this: *mut ffi::GDBusServer, connection: *mut ffi::GDBusConnection, f: glib_ffi::gpointer) -> glib_ffi::gboolean
where P: IsA<DBusServer> {
    callback_guard!();
    let f: &&(Fn(&P, &DBusConnection) -> bool + 'static) = transmute(f);
    f(&DBusServer::from_glib_borrow(this).downcast_unchecked(), &from_glib_borrow(connection)).to_glib()
}

unsafe extern "C" fn notify_active_trampoline<P>(this: *mut ffi::GDBusServer, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DBusServer> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DBusServer::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_address_trampoline<P>(this: *mut ffi::GDBusServer, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DBusServer> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DBusServer::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_authentication_observer_trampoline<P>(this: *mut ffi::GDBusServer, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DBusServer> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DBusServer::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_client_address_trampoline<P>(this: *mut ffi::GDBusServer, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DBusServer> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DBusServer::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_flags_trampoline<P>(this: *mut ffi::GDBusServer, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DBusServer> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DBusServer::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_guid_trampoline<P>(this: *mut ffi::GDBusServer, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DBusServer> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DBusServer::from_glib_borrow(this).downcast_unchecked())
}
