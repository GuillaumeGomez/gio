// This file was generated by gir (5a68ad0) from gir-files (469db10)
// DO NOT EDIT

#[cfg(any(feature = "v2_34", feature = "dox"))]
use Error;
use ffi;
use glib;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct AsyncResult(Object<ffi::GAsyncResult, ffi::GAsyncResultIface>);

    match fn {
        get_type => || ffi::g_async_result_get_type(),
    }
}

pub trait AsyncResultExt {
    fn get_source_object(&self) -> Option<glib::Object>;

    //fn get_user_data(&self) -> /*Unimplemented*/Option<Fundamental: Pointer>;

    //#[cfg(any(feature = "v2_34", feature = "dox"))]
    //fn is_tagged<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, source_tag: P) -> bool;

    #[cfg(any(feature = "v2_34", feature = "dox"))]
    fn legacy_propagate_error(&self) -> Result<(), Error>;
}

impl<O: IsA<AsyncResult>> AsyncResultExt for O {
    fn get_source_object(&self) -> Option<glib::Object> {
        unsafe {
            from_glib_full(ffi::g_async_result_get_source_object(self.to_glib_none().0))
        }
    }

    //fn get_user_data(&self) -> /*Unimplemented*/Option<Fundamental: Pointer> {
    //    unsafe { TODO: call ffi::g_async_result_get_user_data() }
    //}

    //#[cfg(any(feature = "v2_34", feature = "dox"))]
    //fn is_tagged<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, source_tag: P) -> bool {
    //    unsafe { TODO: call ffi::g_async_result_is_tagged() }
    //}

    #[cfg(any(feature = "v2_34", feature = "dox"))]
    fn legacy_propagate_error(&self) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::g_async_result_legacy_propagate_error(self.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }
}
