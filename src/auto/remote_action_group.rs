// This file was generated by gir (5a68ad0) from gir-files (469db10)
// DO NOT EDIT

use ActionGroup;
use ffi;
use glib;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct RemoteActionGroup(Object<ffi::GRemoteActionGroup, ffi::GRemoteActionGroupInterface>): ActionGroup;

    match fn {
        get_type => || ffi::g_remote_action_group_get_type(),
    }
}

pub trait RemoteActionGroupExt {
    fn activate_action_full<'a, P: Into<Option<&'a glib::Variant>>>(&self, action_name: &str, parameter: P, platform_data: &glib::Variant);

    fn change_action_state_full(&self, action_name: &str, value: &glib::Variant, platform_data: &glib::Variant);
}

impl<O: IsA<RemoteActionGroup>> RemoteActionGroupExt for O {
    fn activate_action_full<'a, P: Into<Option<&'a glib::Variant>>>(&self, action_name: &str, parameter: P, platform_data: &glib::Variant) {
        let parameter = parameter.into();
        let parameter = parameter.to_glib_none();
        unsafe {
            ffi::g_remote_action_group_activate_action_full(self.to_glib_none().0, action_name.to_glib_none().0, parameter.0, platform_data.to_glib_none().0);
        }
    }

    fn change_action_state_full(&self, action_name: &str, value: &glib::Variant, platform_data: &glib::Variant) {
        unsafe {
            ffi::g_remote_action_group_change_action_state_full(self.to_glib_none().0, action_name.to_glib_none().0, value.to_glib_none().0, platform_data.to_glib_none().0);
        }
    }
}
