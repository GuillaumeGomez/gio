// This file was generated by gir (5a68ad0) from gir-files (469db10)
// DO NOT EDIT

use Cancellable;
use Error;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct Initable(Object<ffi::GInitable, ffi::GInitableIface>);

    match fn {
        get_type => || ffi::g_initable_get_type(),
    }
}

impl Initable {
    //pub fn new<'a, 'b, P: Into<Option<&'a Cancellable>>, Q: Into<Option<&'b str>>>(object_type: glib::types::Type, cancellable: P, error: &mut Error, first_property_name: Q, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> Option<glib::Object> {
    //    unsafe { TODO: call ffi::g_initable_new() }
    //}

    //pub fn new_valist<'a, P: Into<Option<&'a Cancellable>>>(object_type: glib::types::Type, first_property_name: &str, var_args: /*Unknown conversion*//*Unimplemented*/Unsupported, cancellable: P) -> Result<glib::Object, Error> {
    //    unsafe { TODO: call ffi::g_initable_new_valist() }
    //}

    //pub fn newv<'a, P: Into<Option<&'a Cancellable>>>(object_type: glib::types::Type, parameters: /*Ignored*/&[&glib::Parameter], cancellable: P) -> Result<glib::Object, Error> {
    //    unsafe { TODO: call ffi::g_initable_newv() }
    //}
}

pub trait InitableExt {
    fn init<'a, P: Into<Option<&'a Cancellable>>>(&self, cancellable: P) -> Result<(), Error>;
}

impl<O: IsA<Initable>> InitableExt for O {
    fn init<'a, P: Into<Option<&'a Cancellable>>>(&self, cancellable: P) -> Result<(), Error> {
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::g_initable_init(self.to_glib_none().0, cancellable.0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }
}
