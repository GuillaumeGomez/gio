// This file was generated by gir (5a68ad0) from gir-files (469db10)
// DO NOT EDIT

use Credentials;
use IOStream;
use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
#[cfg(any(feature = "v2_34", feature = "dox"))]
use libc;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct DBusAuthObserver(Object<ffi::GDBusAuthObserver>);

    match fn {
        get_type => || ffi::g_dbus_auth_observer_get_type(),
    }
}

impl DBusAuthObserver {
    pub fn new() -> DBusAuthObserver {
        unsafe {
            from_glib_full(ffi::g_dbus_auth_observer_new())
        }
    }
}

impl Default for DBusAuthObserver {
    fn default() -> Self {
        Self::new()
    }
}

pub trait DBusAuthObserverExt {
    #[cfg(any(feature = "v2_34", feature = "dox"))]
    fn allow_mechanism(&self, mechanism: &str) -> bool;

    fn authorize_authenticated_peer<'a, P: IsA<IOStream>, Q: Into<Option<&'a Credentials>>>(&self, stream: &P, credentials: Q) -> bool;

    #[cfg(any(feature = "v2_34", feature = "dox"))]
    fn connect_allow_mechanism<F: Fn(&Self, &str) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_authorize_authenticated_peer<F: Fn(&Self, &IOStream, &Option<Credentials>) -> bool + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DBusAuthObserver> + IsA<glib::object::Object>> DBusAuthObserverExt for O {
    #[cfg(any(feature = "v2_34", feature = "dox"))]
    fn allow_mechanism(&self, mechanism: &str) -> bool {
        unsafe {
            from_glib(ffi::g_dbus_auth_observer_allow_mechanism(self.to_glib_none().0, mechanism.to_glib_none().0))
        }
    }

    fn authorize_authenticated_peer<'a, P: IsA<IOStream>, Q: Into<Option<&'a Credentials>>>(&self, stream: &P, credentials: Q) -> bool {
        let credentials = credentials.into();
        let credentials = credentials.to_glib_none();
        unsafe {
            from_glib(ffi::g_dbus_auth_observer_authorize_authenticated_peer(self.to_glib_none().0, stream.to_glib_none().0, credentials.0))
        }
    }

    #[cfg(any(feature = "v2_34", feature = "dox"))]
    fn connect_allow_mechanism<F: Fn(&Self, &str) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &str) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "allow-mechanism",
                transmute(allow_mechanism_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_authorize_authenticated_peer<F: Fn(&Self, &IOStream, &Option<Credentials>) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &IOStream, &Option<Credentials>) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "authorize-authenticated-peer",
                transmute(authorize_authenticated_peer_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

#[cfg(any(feature = "v2_34", feature = "dox"))]
unsafe extern "C" fn allow_mechanism_trampoline<P>(this: *mut ffi::GDBusAuthObserver, mechanism: *mut libc::c_char, f: glib_ffi::gpointer) -> glib_ffi::gboolean
where P: IsA<DBusAuthObserver> {
    callback_guard!();
    let f: &&(Fn(&P, &str) -> bool + 'static) = transmute(f);
    f(&DBusAuthObserver::from_glib_borrow(this).downcast_unchecked(), &String::from_glib_none(mechanism)).to_glib()
}

unsafe extern "C" fn authorize_authenticated_peer_trampoline<P>(this: *mut ffi::GDBusAuthObserver, stream: *mut ffi::GIOStream, credentials: *mut ffi::GCredentials, f: glib_ffi::gpointer) -> glib_ffi::gboolean
where P: IsA<DBusAuthObserver> {
    callback_guard!();
    let f: &&(Fn(&P, &IOStream, &Option<Credentials>) -> bool + 'static) = transmute(f);
    f(&DBusAuthObserver::from_glib_borrow(this).downcast_unchecked(), &from_glib_borrow(stream), &from_glib_borrow(credentials)).to_glib()
}
